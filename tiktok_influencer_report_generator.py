print("üöÄ Script started ‚Äî reading sheet and launching...")

import os, json

# ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå service account ‡∏à‡∏≤‡∏Å ENV
if "GOOGLE_APPLICATION_CREDENTIALS_JSON" in os.environ:
    with open("influencer-credentials.json", "w") as f:
        json.dump(json.loads(os.environ["GOOGLE_APPLICATION_CREDENTIALS_JSON"]), f)
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "influencer-credentials.json"

# -*- coding: utf-8 -*-
"""
TikTok Influencer Report Generator
=================================
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PNG / PDF ‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏•‡∏¢‡πå‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏°‡∏≤
...
"""

from googleapiclient.discovery import build
from google.oauth2 import service_account
import pandas as pd
import requests
from PIL import Image, ImageDraw, ImageFont
from playwright.sync_api import sync_playwright

# üì• Debug: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheet
print("üì• Connecting to Google Sheet...")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Sheet
SPREADSHEET_ID = "1vRr9RYRJWR46m_rnZoO37hHD96CwipECAIxbCeAsHUw"
RANGE = "Selected KOLs!B:N"

creds = service_account.Credentials.from_service_account_file(
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"],
    scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
)

service = build("sheets", "v4", credentials=creds)
sheet = service.spreadsheets().values().get(
    spreadsheetId=SPREADSHEET_ID,
    range=RANGE
).execute()

# ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
print("‚úÖ Connected to Google Sheet...")

# ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
values = sheet.get("values", [])
df = pd.DataFrame(values[1:], columns=values[0])  # ‡∏Ç‡πâ‡∏≤‡∏° header

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô TikTok URL
with sync_playwright() as p:
    browser = p.chromium.launch(headless=True)
    context = browser.new_context()
    page = context.new_page()

    for i, row in df.iterrows():
        name = row["Influencers"]
        url = row["Link Post"]
        if not url:
            continue

        print(f">>> Processing influencer: {name}")
        print(f"üîó Visiting TikTok URL: {url}")

        try:
            page.goto(url, timeout=15000)
            print(f"üåê Loaded TikTok page for {name}")

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° debug print ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            print("üîç Extracting TikTok stats...")

            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ CSS Selector (‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° selector ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ TikTok)
            def extract_number(selector):
                try:
                    text = page.locator(selector).first.text_content()
                    return text.strip() if text else "N/A"
                except:
                    return "N/A"

            views = extract_number('strong[data-e2e="video-views"]')
            likes = extract_number('strong[data-e2e="like-count"]')
            shares = extract_number('strong[data-e2e="share-count"]')
            comments = extract_number('strong[data-e2e="comment-count"]')

            print(f"‚úÖ Stats for {name}: Views={views}, Likes={likes}, Comments={comments}, Shares={shares}")

            # ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏™‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å generate_report() ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏∏‡∏ì
            # generate_report(name, username, views, likes, comments, shares)

        except Exception as e:
            print(f"‚ùå Failed to load TikTok for {name}: {e}")
            continue


# ... (rest of the logic: capture stats, paste into template, export PNG)
